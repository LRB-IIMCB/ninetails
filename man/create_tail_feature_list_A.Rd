% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/ninetails_training_dataset_production_functions_guppy.R
\name{create_tail_feature_list_A}
\alias{create_tail_feature_list_A}
\title{Extracts features of poly(A) tails of ONT RNA reads required for finding
non-A nucleotides within the given tails.}
\usage{
create_tail_feature_list_A(
  nanopolish,
  sequencing_summary,
  workspace,
  num_cores,
  basecall_group,
  pass_only = TRUE
)
}
\arguments{
\item{nanopolish}{character string. Full path of the .tsv file produced
by nanopolish polya function.}

\item{sequencing_summary}{character string. Full path of the .txt file
with sequencing summary.}

\item{workspace}{character string. Full path of the directory to search the
basecalled fast5 files in. The Fast5 files have to be multi-fast5 file.}

\item{num_cores}{numeric [1]. Number of physical cores to use in processing
the data. Do not exceed 1 less than the number of cores at your disposal.}

\item{basecall_group}{character string ["Basecall_1D_000"]. Name of the
level in the Fast5 file hierarchy from which the data should be extracted.}

\item{pass_only}{logical [TRUE/FALSE]. If TRUE, only reads tagged by
nanopolish as "PASS" would be taken into consideration. Otherwise, reads
tagged as "PASS" & "SUFFCLIP" will be taken into account in analysis.
As a default, "TRUE" value is set.}
}
\value{
A list containing read information organized by the read ID
is returned. Always assign this returned list to a variable, otherwise
the long list will be printed to the console, which may crash your R session.
}
\description{
This is the version of the function useful to produce the training set
for CNN. Slightly different from the original one. This version allows
to prepare the dataset of only A containing signals.
}
\examples{
\dontrun{

create_tail_feature_list_A(nanopolish = '/path/to/file',
                                     sequencing_summary = '/path/to/file',
                                     workspace = '/path/to/guppy/workspace',
                                     num_cores = 10,
                                     basecall_group = 'Basecall_1D_000')
}
}
