% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ninetails_misc_helper_functions.R
\name{check_output_directory}
\alias{check_output_directory}
\title{Check and handle existing output directory for ninetails analysis}
\usage{
check_output_directory(save_dir, log_message)
}
\arguments{
\item{save_dir}{Character string. Full path to the output directory where
ninetails results will be saved.}

\item{log_message}{Function for logging messages to both console and log file.
Should accept parameters: message, type, section.}
}
\value{
Logical. Returns TRUE if the analysis should proceed, FALSE if the
  user chose to abort the analysis.
}
\description{
This function checks if the specified output directory already exists and contains
files that might be overwritten by the ninetails analysis. If the directory exists
and is not empty, it prompts the user for action and logs the decision.
}
\details{
This function is not intended to be used outside the pipeline wrapper.
}
\section{User Interaction}{

When an existing non-empty directory is detected, the function will:
\itemize{
  \item Display the directory path and file count
  \item Prompt the user to choose: abort analysis or overwrite existing files
  \item Wait for user input (a/A for abort, o/O for overwrite)
  \item Log the user's decision and proceed accordingly
}
}

\section{Directory States}{

The function handles several directory states:
\itemize{
  \item \strong{Non-existent}: Creates the directory and logs creation
  \item \strong{Empty}: Uses existing directory and logs confirmation
  \item \strong{Non-empty}: Prompts user for overwrite decision
}
}

\section{Implementation Notes}{

\itemize{
  \item Uses \code{readline()} for interactive user input
  \item Logs all decisions and actions for audit trail
  \item Handles edge cases like permission errors
  \item Validates user input with retry mechanism
}
}

\examples{
\dontrun{
# Example with logging function
log_func <- function(msg, type = "INFO", section = NULL) {
  cat(sprintf("[\%s] \%s\n", type, msg))
}

# Check directory and proceed if allowed
should_proceed <- check_output_directory("/path/to/output", log_func)
if (should_proceed) {
  # Continue with analysis
} else {
  # User chose to abort
}
}
}
